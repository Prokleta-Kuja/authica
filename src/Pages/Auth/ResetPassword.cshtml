@page "/reset-password/{Token:guid?}"
@model authica.Pages.Auth.ResetPasswordModel
@using authica
@{
    Layout = "_Layout";
    ViewBag.Title = $"Reset password - {authica.C.Configuration.Current.Issuer}";
}

<div class="d-flex align-items-center justify-content-center min-vh-100">
    <div class="card m-1">
        @if (Model.EmailSent)
        {
            <div class="card-body text-center">
                <h2>@Model.T.EmailSentTitle</h2>
                <p>@Model.T.EmailSentDescription</p>
            </div>
        }
        else if (!Model.EmailServiceSetup)
        {
            <div class="card-body text-center">
                <h2 class="text-danger">@Model.T.EmailSetupTitle</h2>
                <p>@Model.T.EmailSetupDescription</p>
            </div>
        }
        else
        {
            <div class="card-header">
                <h2 class="text-center mb-0">@Model.T.ResetPassword</h2>
            </div>
            <div class="card-body">
                @if (Model.Token.HasValue && !string.IsNullOrWhiteSpace(Model.Email))
                {
                    <form method="post">
                        <div class="mb-3">
                            <label for="email" class="form-label">@Model.T.Email</label>
                            <input type="email" class="form-control" id="email" readonly value=@Model.Email autofocus>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">@Model.T.NewPassword</label>
                            <input type="password" required id="password" name=@nameof(Model.Password)
                        autocomplete="new-password"
                        class="form-control @(Model.Errors.ContainsKey(nameof(Model.Password)) ? "is-invalid" : string.Empty)">
                            @if (Model.Errors.ContainsKey(nameof(Model.Password)))
                            {
                                <div class="invalid-feedback">
                                    @Model.Errors[nameof(Model.Password)]
                                </div>
                            }
                        </div>
                        @if (Model.Errors.ContainsKey(string.Empty))
                        {
                            <div class="mb-3 text-danger">
                                @Model.Errors[string.Empty]
                            </div>
                        }
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" type="submit">@Model.T.Reset</button>
                        </div>
                    </form>
                }
                else
                {
                    <form method="post" action="@C.Routes.ResetPassword/?handler=email">
                        <div class="mb-3">
                            <label for="email" class="form-label">@Model.T.Email</label>
                            <input type="email" required id="email" name=@nameof(Model.Email) autofocus
                        class="form-control @(Model.Errors.ContainsKey(nameof(Model.Email)) ? "is-invalid" : string.Empty)">
                            @if (Model.Errors.ContainsKey(nameof(Model.Email)))
                            {
                                <div class="invalid-feedback">
                                    @Model.Errors[nameof(Model.Email)]
                                </div>
                            }
                        </div>
                        @if (Model.Errors.ContainsKey(string.Empty))
                        {
                            <div class="mb-3 text-danger">
                                @Model.Errors[string.Empty]
                            </div>
                        }
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" type="submit">@Model.T.SendConfirmation</button>
                        </div>
                    </form>
                }
            </div>
        }
    </div>
</div>