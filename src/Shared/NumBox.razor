@using System.Globalization

<div class="mb-3">
    <label for="@For" class="form-label">@Label @(Required ? "*":"")</label>
    <input class="form-control @_errorClass" id="@For" placeholder=@PlaceHolder @bind=@InputValue @bind:culture=_ci
        required=@Required @ref=Input>
    @if (_isError)
    {
        <div class="invalid-feedback">
            @Errors![For]
        </div>
    }
</div>

@code {
    const string DEFAULT_LOCALE = "hr-HR";
    const string DEFAULT_TZ = "Europe/Zagreb";
    private bool _isError => Errors != null && Errors.ContainsKey(For);
    private string _errorClass => _isError ? "is-invalid" : string.Empty;
    private ElementReference Input;
    private decimal? InputValue { get => Value; set { _ = UpdateAsync(value); } }
    CultureInfo _ci = null!;
    [Parameter] public string For { get; set; } = null!;
    [Parameter] public string Label { get; set; } = null!;
    [Parameter] public decimal? Value { get; set; }
    [Parameter] public EventCallback<decimal?> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? PlaceHolder { get; set; }
    [Parameter] public string? Locale { get; set; }
    [Parameter] public Dictionary<string, string>? Errors { get; set; }
    [Parameter] public bool AutoFocus { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoFocus)
            await Input.FocusAsync();
    }
    protected override void OnInitialized()
    {
        try { _ci = CultureInfo.GetCultureInfo(Locale ?? DEFAULT_LOCALE); }
        catch (Exception) { _ci = CultureInfo.GetCultureInfo(DEFAULT_LOCALE); }
    }
    private async Task UpdateAsync(decimal? value)
    {
        if (_isError)
            Errors!.Remove(For);

        if (!ValueChanged.HasDelegate)
            return;

        await ValueChanged.InvokeAsync(value);
    }
}